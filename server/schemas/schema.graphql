"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invitationId: UUID
  code: String
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Author implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
}

"""
A condition to be used against `Author` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AuthorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `Author`"""
input AuthorInput {
  id: Int
  name: String
}

"""
Represents an update to a `Author`. Fields that are set will be updated.
"""
input AuthorPatch {
  id: Int
  name: String
}

"""A connection to a list of `Author` values."""
type AuthorsConnection {
  """A list of `Author` objects."""
  nodes: [Author!]!

  """
  A list of edges which contains the `Author` and cursor to aid in pagination.
  """
  edges: [AuthorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Author` you could get from the connection."""
  totalCount: Int!
}

"""A `Author` edge in the connection."""
type AuthorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Author` at the end of the edge."""
  node: Author!
}

"""Methods to use when ordering `Author`."""
enum AuthorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  oldPassword: String!
  newPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Author` mutation."""
input CreateAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Author` to be created by this mutation."""
  author: AuthorInput!
}

"""The output of our create `Author` mutation."""
type CreateAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Author` that was created by this mutation."""
  author: Author

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Author`. May be used by Relay 1."""
  authorEdge(
    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AuthorsEdge
}

"""All input for the create `Organization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organization` to be created by this mutation."""
  organization: OrganizationInput!
}

"""All input for the create `OrganizationInvitation` mutation."""
input CreateOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganizationInvitation` to be created by this mutation."""
  organizationInvitation: OrganizationInvitationInput!
}

"""The output of our create `OrganizationInvitation` mutation."""
type CreateOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationInvitation` that was created by this mutation."""
  organizationInvitation: OrganizationInvitation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  userByUserId: User

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge
}

"""All input for the create `OrganizationMembership` mutation."""
input CreateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganizationMembership` to be created by this mutation."""
  organizationMembership: OrganizationMembershipInput!
}

"""The output of our create `OrganizationMembership` mutation."""
type CreateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationMembership` that was created by this mutation."""
  organizationMembership: OrganizationMembership

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  userByUserId: User

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge
}

"""The output of our create `Organization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was created by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the create `PostAuthor` mutation."""
input CreatePostAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PostAuthor` to be created by this mutation."""
  postAuthor: PostAuthorInput!
}

"""The output of our create `PostAuthor` mutation."""
type CreatePostAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostAuthor` that was created by this mutation."""
  postAuthor: PostAuthor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Post` that is related to this `PostAuthor`."""
  postByPostId: Post

  """An edge for our `PostAuthor`. May be used by Relay 1."""
  postAuthorEdge(
    """The method to use when ordering `PostAuthor`."""
    orderBy: [PostAuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostAuthorsEdge
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the create `UserAuthentication` mutation."""
input CreateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAuthentication` to be created by this mutation."""
  userAuthentication: UserAuthenticationInput!
}

"""The output of our create `UserAuthentication` mutation."""
type CreateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was created by this mutation."""
  userAuthentication: UserAuthentication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  userByUserId: User

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  userByUserId: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A `UUID` edge in the connection."""
type CurrentUserInvitedOrganizationIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserInvitedOrganizationIdsConnection {
  """A list of `UUID` objects."""
  nodes: [UUID]!

  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserInvitedOrganizationIdEdge!]!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserMemberOrganizationIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserMemberOrganizationIdsConnection {
  """A list of `UUID` objects."""
  nodes: [UUID]!

  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserMemberOrganizationIdEdge!]!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteAuthorById` mutation."""
input DeleteAuthorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteAuthor` mutation."""
input DeleteAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Author` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Author` mutation."""
type DeleteAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Author` that was deleted by this mutation."""
  author: Author
  deletedAuthorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Author`. May be used by Relay 1."""
  authorEdge(
    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AuthorsEdge
}

"""All input for the `deleteOrganizationById` mutation."""
input DeleteOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteOrganizationBySlug` mutation."""
input DeleteOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrganizationInvitationById` mutation."""
input DeleteOrganizationInvitationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteOrganizationInvitationByOrganizationIdAndEmail` mutation.
"""
input DeleteOrganizationInvitationByOrganizationIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  email: String!
}

"""
All input for the `deleteOrganizationInvitationByOrganizationIdAndUserId` mutation.
"""
input DeleteOrganizationInvitationByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""All input for the `deleteOrganizationInvitation` mutation."""
input DeleteOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationInvitation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OrganizationInvitation` mutation."""
type DeleteOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationInvitation` that was deleted by this mutation."""
  organizationInvitation: OrganizationInvitation
  deletedOrganizationInvitationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  userByUserId: User

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge
}

"""All input for the `deleteOrganizationMembershipById` mutation."""
input DeleteOrganizationMembershipByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteOrganizationMembershipByOrganizationIdAndUserId` mutation.
"""
input DeleteOrganizationMembershipByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""All input for the `deleteOrganizationMembership` mutation."""
input DeleteOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationMembership` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OrganizationMembership` mutation."""
type DeleteOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationMembership` that was deleted by this mutation."""
  organizationMembership: OrganizationMembership
  deletedOrganizationMembershipId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  userByUserId: User

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was deleted by this mutation."""
  organization: Organization
  deletedOrganizationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `deletePostAuthorByPostIdAndAuthorId` mutation."""
input DeletePostAuthorByPostIdAndAuthorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  postId: Int!
  authorId: Int!
}

"""All input for the `deletePostAuthor` mutation."""
input DeletePostAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostAuthor` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PostAuthor` mutation."""
type DeletePostAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostAuthor` that was deleted by this mutation."""
  postAuthor: PostAuthor
  deletedPostAuthorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Post` that is related to this `PostAuthor`."""
  postByPostId: Post

  """An edge for our `PostAuthor`. May be used by Relay 1."""
  postAuthorEdge(
    """The method to use when ordering `PostAuthor`."""
    orderBy: [PostAuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostAuthorsEdge
}

"""All input for the `deletePostById` mutation."""
input DeletePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `deleteUserAuthenticationById` mutation."""
input DeleteUserAuthenticationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
  deletedUserAuthenticationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  userByUserId: User

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `deleteUserEmailById` mutation."""
input DeleteUserEmailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail
  deletedUserEmailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  userByUserId: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID
  username: String
  email: String
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  username: String!
  password: String!
}

type LoginPayload {
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  userByUserId: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Author`."""
  createAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAuthorInput!
  ): CreateAuthorPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `PostAuthor`."""
  createPostAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostAuthorInput!
  ): CreatePostAuthorPayload

  """Creates a single `OrganizationInvitation`."""
  createOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInvitationInput!
  ): CreateOrganizationInvitationPayload

  """Creates a single `OrganizationMembership`."""
  createOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationMembershipInput!
  ): CreateOrganizationMembershipPayload

  """Creates a single `Organization`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `UserAuthentication`."""
  createUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAuthenticationInput!
  ): CreateUserAuthenticationPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Author` using its globally unique id and a patch."""
  updateAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuthorInput!
  ): UpdateAuthorPayload

  """Updates a single `Author` using a unique key and a patch."""
  updateAuthorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuthorByIdInput!
  ): UpdateAuthorPayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByIdInput!
  ): UpdatePostPayload

  """
  Updates a single `PostAuthor` using its globally unique id and a patch.
  """
  updatePostAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostAuthorInput!
  ): UpdatePostAuthorPayload

  """Updates a single `PostAuthor` using a unique key and a patch."""
  updatePostAuthorByPostIdAndAuthorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostAuthorByPostIdAndAuthorIdInput!
  ): UpdatePostAuthorPayload

  """
  Updates a single `OrganizationInvitation` using its globally unique id and a patch.
  """
  updateOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationInvitation` using a unique key and a patch.
  """
  updateOrganizationInvitationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationByIdInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationInvitation` using a unique key and a patch.
  """
  updateOrganizationInvitationByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationByOrganizationIdAndUserIdInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationInvitation` using a unique key and a patch.
  """
  updateOrganizationInvitationByOrganizationIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationByOrganizationIdAndEmailInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationMembership` using its globally unique id and a patch.
  """
  updateOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `OrganizationMembership` using a unique key and a patch.
  """
  updateOrganizationMembershipById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipByIdInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `OrganizationMembership` using a unique key and a patch.
  """
  updateOrganizationMembershipByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipByOrganizationIdAndUserIdInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `UserAuthentication` using its globally unique id and a patch.
  """
  updateUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthenticationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationByIdInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationByServiceAndIdentifierInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `UserEmail` using its globally unique id and a patch."""
  updateUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserEmail` using a unique key and a patch."""
  updateUserEmailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailByIdInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserEmail` using a unique key and a patch."""
  updateUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailByUserIdAndEmailInput!
  ): UpdateUserEmailPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Deletes a single `Author` using its globally unique id."""
  deleteAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuthorInput!
  ): DeleteAuthorPayload

  """Deletes a single `Author` using a unique key."""
  deleteAuthorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuthorByIdInput!
  ): DeleteAuthorPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByIdInput!
  ): DeletePostPayload

  """Deletes a single `PostAuthor` using its globally unique id."""
  deletePostAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostAuthorInput!
  ): DeletePostAuthorPayload

  """Deletes a single `PostAuthor` using a unique key."""
  deletePostAuthorByPostIdAndAuthorId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostAuthorByPostIdAndAuthorIdInput!
  ): DeletePostAuthorPayload

  """
  Deletes a single `OrganizationInvitation` using its globally unique id.
  """
  deleteOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationInput!
  ): DeleteOrganizationInvitationPayload

  """Deletes a single `OrganizationInvitation` using a unique key."""
  deleteOrganizationInvitationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationByIdInput!
  ): DeleteOrganizationInvitationPayload

  """Deletes a single `OrganizationInvitation` using a unique key."""
  deleteOrganizationInvitationByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationByOrganizationIdAndUserIdInput!
  ): DeleteOrganizationInvitationPayload

  """Deletes a single `OrganizationInvitation` using a unique key."""
  deleteOrganizationInvitationByOrganizationIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationByOrganizationIdAndEmailInput!
  ): DeleteOrganizationInvitationPayload

  """
  Deletes a single `OrganizationMembership` using its globally unique id.
  """
  deleteOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `OrganizationMembership` using a unique key."""
  deleteOrganizationMembershipById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipByIdInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `OrganizationMembership` using a unique key."""
  deleteOrganizationMembershipByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipByOrganizationIdAndUserIdInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `Organization` using its globally unique id."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationBySlugInput!
  ): DeleteOrganizationPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use
  `requestAccountDeletion` to request an account deletion token, and then supply
  the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """
  If you've forgotten your password, give us one of your email addresses and
  we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Your primary email is where we'll notify of account events; other emails may
  be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it.
  We silently cap the rate of resends on the backend, so calls to this function
  may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this
  with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  transferOrganizationBillingContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationBillingContactInput!
  ): TransferOrganizationBillingContactPayload
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """
  Once you have received a verification token for your email, you may call this
  mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  slug: String!
  name: String!
  createdAt: Datetime!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMembershipsByOrganizationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition
  ): OrganizationMembershipsConnection!

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitationsByOrganizationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition
  ): OrganizationInvitationsConnection!
  currentUserIsBillingContact: Boolean
  currentUserIsOwner: Boolean
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""An input for mutations affecting `Organization`"""
input OrganizationInput {
  id: UUID
  slug: String!
  name: String!
  createdAt: Datetime
}

type OrganizationInvitation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  organizationId: UUID!
  code: String
  userId: UUID
  email: String

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  userByUserId: User
}

"""
A condition to be used against `OrganizationInvitation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationInvitationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `OrganizationInvitation`"""
input OrganizationInvitationInput {
  id: UUID
  organizationId: UUID!
  code: String
  userId: UUID
  email: String
}

"""
Represents an update to a `OrganizationInvitation`. Fields that are set will be updated.
"""
input OrganizationInvitationPatch {
  id: UUID
  organizationId: UUID
  code: String
  userId: UUID
  email: String
}

"""A connection to a list of `OrganizationInvitation` values."""
type OrganizationInvitationsConnection {
  """A list of `OrganizationInvitation` objects."""
  nodes: [OrganizationInvitation!]!

  """
  A list of edges which contains the `OrganizationInvitation` and cursor to aid in pagination.
  """
  edges: [OrganizationInvitationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationInvitation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationInvitation` edge in the connection."""
type OrganizationInvitationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationInvitation` at the end of the edge."""
  node: OrganizationInvitation!
}

"""Methods to use when ordering `OrganizationInvitation`."""
enum OrganizationInvitationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type OrganizationMembership implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  organizationId: UUID!
  userId: UUID!
  isOwner: Boolean!
  isBillingContact: Boolean!
  createdAt: Datetime!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  userByUserId: User
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `OrganizationMembership`"""
input OrganizationMembershipInput {
  id: UUID
  organizationId: UUID!
  userId: UUID!
  isOwner: Boolean
  isBillingContact: Boolean
  createdAt: Datetime
}

"""
Represents an update to a `OrganizationMembership`. Fields that are set will be updated.
"""
input OrganizationMembershipPatch {
  id: UUID
  organizationId: UUID
  userId: UUID
  isOwner: Boolean
  isBillingContact: Boolean
  createdAt: Datetime
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  id: UUID
  slug: String
  name: String
  createdAt: Datetime
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SLUG_ASC
  SLUG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  headline: String
  body: String

  """Reads and enables pagination through a set of `PostAuthor`."""
  postAuthorsByPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostAuthor`."""
    orderBy: [PostAuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostAuthorCondition
  ): PostAuthorsConnection!

  """Reads and enables pagination through a set of `Author`."""
  authorsByPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): AuthorsConnection!
}

type PostAuthor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  postId: Int!
  authorId: Int!

  """Reads a single `Post` that is related to this `PostAuthor`."""
  postByPostId: Post
}

"""
A condition to be used against `PostAuthor` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PostAuthorCondition {
  """Checks for equality with the object’s `postId` field."""
  postId: Int
}

"""An input for mutations affecting `PostAuthor`"""
input PostAuthorInput {
  postId: Int!
  authorId: Int!
}

"""
Represents an update to a `PostAuthor`. Fields that are set will be updated.
"""
input PostAuthorPatch {
  postId: Int
  authorId: Int
}

"""A connection to a list of `PostAuthor` values."""
type PostAuthorsConnection {
  """A list of `PostAuthor` objects."""
  nodes: [PostAuthor!]!

  """
  A list of edges which contains the `PostAuthor` and cursor to aid in pagination.
  """
  edges: [PostAuthorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PostAuthor` you could get from the connection."""
  totalCount: Int!
}

"""A `PostAuthor` edge in the connection."""
type PostAuthorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PostAuthor` at the end of the edge."""
  node: PostAuthor!
}

"""Methods to use when ordering `PostAuthor`."""
enum PostAuthorsOrderBy {
  NATURAL
  POST_ID_ASC
  POST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `Post`"""
input PostInput {
  id: Int
  headline: String
  body: String
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  id: Int
  headline: String
  body: String
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post!]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Author`."""
  allAuthors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuthorCondition
  ): AuthorsConnection

  """Reads and enables pagination through a set of `Post`."""
  allPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection

  """Reads and enables pagination through a set of `PostAuthor`."""
  allPostAuthors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostAuthor`."""
    orderBy: [PostAuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostAuthorCondition
  ): PostAuthorsConnection

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  allOrganizationInvitations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition
  ): OrganizationInvitationsConnection

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  allOrganizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  allOrganizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition
  ): OrganizationsConnection

  """Reads and enables pagination through a set of `UserAuthentication`."""
  allUserAuthentications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition
  ): UserAuthenticationsConnection

  """Reads and enables pagination through a set of `UserEmail`."""
  allUserEmails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition
  ): UserEmailsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  authorById(id: Int!): Author
  postById(id: Int!): Post
  postAuthorByPostIdAndAuthorId(postId: Int!, authorId: Int!): PostAuthor
  organizationInvitationById(id: UUID!): OrganizationInvitation
  organizationInvitationByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationInvitation
  organizationInvitationByOrganizationIdAndEmail(organizationId: UUID!, email: String!): OrganizationInvitation
  organizationMembershipById(id: UUID!): OrganizationMembership
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership
  organizationById(id: UUID!): Organization
  organizationBySlug(slug: String!): Organization
  userAuthenticationById(id: UUID!): UserAuthentication
  userAuthenticationByServiceAndIdentifier(service: String!, identifier: String!): UserAuthentication
  userEmailById(id: UUID!): UserEmail
  userEmailByUserIdAndEmail(userId: UUID!, email: String!): UserEmail
  userById(id: UUID!): User
  userByUsername(username: String!): User

  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: UUID
  currentUserInvitedOrganizationIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CurrentUserInvitedOrganizationIdsConnection
  currentUserMemberOrganizationIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): CurrentUserMemberOrganizationIdsConnection
  organizationForInvitation(invitationId: UUID, code: String): Organization

  """Reads a single `Author` using its globally unique `ID`."""
  author(
    """The globally unique `ID` to be used in selecting a single `Author`."""
    nodeId: ID!
  ): Author

  """Reads a single `Post` using its globally unique `ID`."""
  post(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): Post

  """Reads a single `PostAuthor` using its globally unique `ID`."""
  postAuthor(
    """
    The globally unique `ID` to be used in selecting a single `PostAuthor`.
    """
    nodeId: ID!
  ): PostAuthor

  """
  Reads a single `OrganizationInvitation` using its globally unique `ID`.
  """
  organizationInvitation(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationInvitation`.
    """
    nodeId: ID!
  ): OrganizationInvitation

  """
  Reads a single `OrganizationMembership` using its globally unique `ID`.
  """
  organizationMembership(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationMembership`.
    """
    nodeId: ID!
  ): OrganizationMembership

  """Reads a single `Organization` using its globally unique `ID`."""
  organization(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthentication(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmail(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  name: String
  avatarUrl: String
}

type RegisterPayload {
  user: User!
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID
  userId: UUID
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
  resetToken: String!
  newPassword: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `transferOrganizationBillingContact` mutation."""
input TransferOrganizationBillingContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID
  userId: UUID
}

"""The output of our `transferOrganizationBillingContact` mutation."""
type TransferOrganizationBillingContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID
  userId: UUID
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `updateAuthorById` mutation."""
input UpdateAuthorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Author` being updated.
  """
  authorPatch: AuthorPatch!
  id: Int!
}

"""All input for the `updateAuthor` mutation."""
input UpdateAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Author` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Author` being updated.
  """
  authorPatch: AuthorPatch!
}

"""The output of our update `Author` mutation."""
type UpdateAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Author` that was updated by this mutation."""
  author: Author

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Author`. May be used by Relay 1."""
  authorEdge(
    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AuthorsEdge
}

"""All input for the `updateOrganizationById` mutation."""
input UpdateOrganizationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  organizationPatch: OrganizationPatch!
  id: UUID!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  organizationPatch: OrganizationPatch!
  slug: String!
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  organizationPatch: OrganizationPatch!
}

"""All input for the `updateOrganizationInvitationById` mutation."""
input UpdateOrganizationInvitationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  organizationInvitationPatch: OrganizationInvitationPatch!
  id: UUID!
}

"""
All input for the `updateOrganizationInvitationByOrganizationIdAndEmail` mutation.
"""
input UpdateOrganizationInvitationByOrganizationIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  organizationInvitationPatch: OrganizationInvitationPatch!
  organizationId: UUID!
  email: String!
}

"""
All input for the `updateOrganizationInvitationByOrganizationIdAndUserId` mutation.
"""
input UpdateOrganizationInvitationByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  organizationInvitationPatch: OrganizationInvitationPatch!
  organizationId: UUID!
  userId: UUID!
}

"""All input for the `updateOrganizationInvitation` mutation."""
input UpdateOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationInvitation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  organizationInvitationPatch: OrganizationInvitationPatch!
}

"""The output of our update `OrganizationInvitation` mutation."""
type UpdateOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationInvitation` that was updated by this mutation."""
  organizationInvitation: OrganizationInvitation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  userByUserId: User

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge
}

"""All input for the `updateOrganizationMembershipById` mutation."""
input UpdateOrganizationMembershipByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  organizationMembershipPatch: OrganizationMembershipPatch!
  id: UUID!
}

"""
All input for the `updateOrganizationMembershipByOrganizationIdAndUserId` mutation.
"""
input UpdateOrganizationMembershipByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  organizationMembershipPatch: OrganizationMembershipPatch!
  organizationId: UUID!
  userId: UUID!
}

"""All input for the `updateOrganizationMembership` mutation."""
input UpdateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationMembership` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  organizationMembershipPatch: OrganizationMembershipPatch!
}

"""The output of our update `OrganizationMembership` mutation."""
type UpdateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationMembership` that was updated by this mutation."""
  organizationMembership: OrganizationMembership

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organizationByOrganizationId: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  userByUserId: User

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `updatePostAuthorByPostIdAndAuthorId` mutation."""
input UpdatePostAuthorByPostIdAndAuthorIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PostAuthor` being updated.
  """
  postAuthorPatch: PostAuthorPatch!
  postId: Int!
  authorId: Int!
}

"""All input for the `updatePostAuthor` mutation."""
input UpdatePostAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostAuthor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PostAuthor` being updated.
  """
  postAuthorPatch: PostAuthorPatch!
}

"""The output of our update `PostAuthor` mutation."""
type UpdatePostAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostAuthor` that was updated by this mutation."""
  postAuthor: PostAuthor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Post` that is related to this `PostAuthor`."""
  postByPostId: Post

  """An edge for our `PostAuthor`. May be used by Relay 1."""
  postAuthorEdge(
    """The method to use when ordering `PostAuthor`."""
    orderBy: [PostAuthorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostAuthorsEdge
}

"""All input for the `updatePostById` mutation."""
input UpdatePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
  id: Int!
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updateUserAuthenticationById` mutation."""
input UpdateUserAuthenticationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  userAuthenticationPatch: UserAuthenticationPatch!
  id: UUID!
}

"""
All input for the `updateUserAuthenticationByServiceAndIdentifier` mutation.
"""
input UpdateUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  userAuthenticationPatch: UserAuthenticationPatch!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
}

"""All input for the `updateUserAuthentication` mutation."""
input UpdateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  userAuthenticationPatch: UserAuthenticationPatch!
}

"""The output of our update `UserAuthentication` mutation."""
type UpdateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was updated by this mutation."""
  userAuthentication: UserAuthentication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  userByUserId: User

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """Unique identifier for the user."""
  id: UUID!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `updateUserEmailById` mutation."""
input UpdateUserEmailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  userEmailPatch: UserEmailPatch!
  id: UUID!
}

"""All input for the `updateUserEmailByUserIdAndEmail` mutation."""
input UpdateUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  userEmailPatch: UserEmailPatch!
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!
}

"""All input for the `updateUserEmail` mutation."""
input UpdateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  userEmailPatch: UserEmailPatch!
}

"""The output of our update `UserEmail` mutation."""
type UpdateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was updated by this mutation."""
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  userByUserId: User

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Unique identifier for the user."""
  id: UUID!

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmailsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition
  ): UserEmailsConnection!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthenticationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition
  ): UserAuthenticationsConnection!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMembershipsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition
  ): OrganizationMembershipsConnection!

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition
  ): OrganizationInvitationsConnection!
  hasPassword: Boolean
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """Additional profile details extracted from this login method"""
  details: JSON!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  userByUserId: User
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `service` field."""
  service: String
}

"""An input for mutations affecting `UserAuthentication`"""
input UserAuthenticationInput {
  id: UUID
  userId: UUID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """Additional profile details extracted from this login method"""
  details: JSON
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `UserAuthentication`. Fields that are set will be updated.
"""
input UserAuthenticationPatch {
  id: UUID
  userId: UUID

  """The login service used, e.g. `twitter` or `github`."""
  service: String

  """A unique identifier for the user within the login service."""
  identifier: String

  """Additional profile details extracted from this login method"""
  details: JSON
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `UserAuthentication` values."""
type UserAuthenticationsConnection {
  """A list of `UserAuthentication` objects."""
  nodes: [UserAuthentication!]!

  """
  A list of edges which contains the `UserAuthentication` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthentication` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication!
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  SERVICE_ASC
  SERVICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""Information about a user's email address."""
type UserEmail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!

  """
  True if the user has is_verified their email address (by clicking the link in
  the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  isPrimary: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  userByUserId: User
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  id: UUID
  userId: UUID

  """The users email address, in `a@b.c` format."""
  email: String!

  """
  True if the user has is_verified their email address (by clicking the link in
  the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  isPrimary: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `UserEmail`. Fields that are set will be updated.
"""
input UserEmailPatch {
  id: UUID
  userId: UUID

  """The users email address, in `a@b.c` format."""
  email: String

  """
  True if the user has is_verified their email address (by clicking the link in
  the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  isPrimary: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Unique identifier for the user."""
  id: UUID

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isVerified: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Unique identifier for the user."""
  id: UUID

  """Public-facing username (or 'handle') of the user."""
  username: String

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isVerified: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userEmailId: UUID!
  token: String!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
